name: CI/CD Workflow
on:
  push:
    branches:
      - develop
      - main
env:
  ENV: demo
  ECS_CLUSTER_NAME: node-js
  ECS_SERVICE_NAME: node-js

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker image
      run: |
        IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/nodejs-app:$ENV-${GITHUB_SHA}
        docker build -t $IMAGE .
        docker push $IMAGE

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps: 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Deploy to ECS
      run: |
        IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/nodejs-app:$ENV-${GITHUB_SHA}
        TD_ARN=$(aws ecs describe-services --services $ECS_SERVICE_NAME --cluster $ECS_CLUSTER_NAME --query 'services[0].taskDefinition' | tr -d '"' )    
        sudo apt install -y jq
        aws ecs describe-task-definition --task-definition $TD_ARN --query 'taskDefinition' --output json > td-tmp.json
        jq ".containerDefinitions |= map(if .name == \"shop\" then .image = \"$IMAGE\" else . end) | del(.revision, .status , .compatibilities ,.taskDefinitionArn ,.requiresAttributes ,.registeredAt, .registeredBy)" td-tmp.json > td.json
        cat td.json
        NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td.json | jq -r '.taskDefinition.taskDefinitionArn')
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TD_ARN --force-new-deployment
        echo "Deployment Success! (͡° ͜ʖ ͡°)"
